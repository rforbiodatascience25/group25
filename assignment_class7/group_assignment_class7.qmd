---
title: "group_assignment_class7"
format:
  html:
    embed-resources: true
editor: visual
---

### Students:

-   André Godinho, s253707, Msc Bioinformatics

-   Catarina Anastácio, s253709, Msc Bioinformatics

-   Lily Whipple, s243865, Msc Bioinformatics

-   Szymon Cholewiński, s253711, Msc Bioinformatics

-   Magnus, s190867, Msc Bioinformatics

## Libraries

```{r}
#| message: false
library("tidyverse")
library("here")
library("broom")
library("cowplot")
```

## Load, Clean and Augment Data

```{r}
data_file <- here("gravier.RData")
```

```{r}
load(file = data_file)
```

```{r}
gravier_clean <- gravier |>
  bind_cols() |>
  as_tibble()

gravier_clean_aug <- gravier_clean |>
  relocate(outcome = y)
```

## PCA Analysis

In general, when performing PCA, we’ll want to do (at least) three things:

1.  Look at the data in PC coordinates.

2.  Look at the rotation matrix.

3.  Look at the variance explained by each PC.

```{r}
pca_fit <- gravier_clean_aug |> 
  select(where(is.numeric)) |>  #  columns except class column
  prcomp(scale = TRUE) # do PCA on scaled data
pca_fit_few <- gravier_clean_aug |> 
  select('g2E09','g7F07','g1A01','g3C09','g3H08','g1A08','g1B01','g1int1','g1E11','g8G02') |>  #  first 10 gene columns
  prcomp(scale = TRUE) # do PCA on scaled data
pca_fit_red <- gravier_clean_aug |> 
  select(where(is.numeric)) |>  #  columns except class column
  prcomp(scale = TRUE, tol = 0.39) # do PCA on scaled data
  
```

```{r}
pca_fit |> 
  augment(gravier_clean_aug) |>  # add original dataset back in
  ggplot(aes(.fittedPC1, .fittedPC2, color = outcome)) + 
  geom_point(size = 1.5) +
  scale_color_manual(
    values = c(poor = "#D55E00", good = "#0072B2")
  ) +
  theme_half_open(12) + background_grid()
```

There is no clear separation between the classes when visualizing the data along the first two principal components, PC1 and PC2.

## Look at the data in PC coordinates

```{r}
# extract rotation matrix
pca_fit |> 
  tidy(matrix = "rotation")
```

In the PCA applied to your dataset with 2,906 variables and 168 samples, the number of principal components is limited by the smaller dimension, which is the number of samples (168), rather than the number of variables. This means PCA can produce at most 168 principal components, each representing a linear combination of the original variables that explain decreasing amounts of variance. This dimensionality reduction simplifies the data while preserving most of its variability. Typically, the first few components capture the majority of the meaningful information, enabling effective visualization and analysis.

This behavior is expected because PCA decomposes variance structure constrained by the number of observations, not variables, in high-dimensional data.

```{r}
# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(2, "pt")
)

# plot rotation matrix
pca_fit_few |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#904C2F"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)
```

If we were to use all available data in **`pca_fit`**, the rotation plot would become cluttered and difficult to interpret due to the large number of vectors (one per gene), resulting in extreme overlap. Instead of reducing the number of components, the approach here is to select a smaller subset of genes (variables) from the beginning, which simplifies the rotation plot by reducing the number of vectors drawn. This method filters the high-dimensional dataset to a manageable subset of genes before performing PCA, making the visualization less cluttered and easier to interpret while still basing the analysis on a representative set of genes. The PCA performed on this reduced gene set (**`pca_fit_few`**) serves only as an illustrative example to provide a clearer and more interpretable rotation plot.

## Look at the variance explained by each PC

```{r}
pca_fit |> 
  tidy(matrix = "eigenvalues")
```

To visualize PCs impact the graph with all of them is created.

```{r}
pca_fit |> 
  tidy(matrix = "eigenvalues") |> 
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_x_continuous() +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12)
```

To have a closer look, graph with first 20 component is also added.

```{r}
pca_fit_red |> 
  tidy(matrix = "eigenvalues") |> 
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_x_continuous(breaks = 1:20) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12)
```

The first component captures 8% of the variation in the data.

```{r}
pca_fit |> 
  tidy(matrix = "eigenvalues") |> 
  mutate(cum_percent = cumsum(percent)) |> 
  ggplot(aes(PC, cum_percent)) +
  geom_line(color = "#56B4E9", size = 1) +
  geom_point(color = "#0072B2", size = 0.5) +
  scale_x_continuous() +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    x = "Principal Component",
    y = "Cumulative Explained Variance (%)",
    title = "Cumulative Variance Explained by Principal Components"
  ) +
  theme_minimal()
```

This plot illustrates the cumulative proportion of variance explained by the principal components, showing how the total variance in the data is incrementally captured as more components are included. It highlights that a relatively large number of components is required to explain a significant portion of variance: about 15 components are needed to reach roughly 50% of explained variance, while approximately 100 components are required to attain around 90%. This indicates the data's complexity and the need to retain many components for an adequate representation of the original variance in downstream analyses.
